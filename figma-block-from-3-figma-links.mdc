---
alwaysApply: false
---
## Инструкция для верстки одного блока по 3 макетам Figma

Агент получает от пользователя три ссылки на Figma (ПК, планшет ≤992px, мобильный
≤768px), описание блока и место размещения. Задача — сверстать ОДИН блок по этим
макетам и встроить его в проект, строго соблюдая правила кода и структуры.

### Что присылает пользователь
- **desktop**: ссылка на макет ПК (Figma)
- **tablet**: ссылка на макет планшета (max-width: 992px)
- **mobile**: ссылка на макет мобильного (max-width: 768px)
- **block**: название/назначение блока (например: hero, features, pricing)
- **place**: где разместить (страница/маршрут и позиция относительно существующих
  секций: до/после/внутри конкретного блока)
- **notes?**: любые уточнения (состояния наведения, активные элементы,
  контент-плейсхолдеры)

Пример ввода (в свободной форме):
```
desktop: <figma_link_1>
tablet: <figma_link_2>
mobile: <figma_link_3>
block: Hero
place: На главной, после Header, перед списком кейсов
notes: Кнопка «Оставить заявку» — primary, иконка — из спрайта
```

### Пошаговый алгоритм для агента
1) **Получить дизайн из Figma**
   - Всегда СНАЧАЛА вызывать `get_code` по каждой из ссылок (desktop/tablet/
     mobile).
   - И только после этого запросить изображения макетов через `get_image` для
     трёх ссылок (передав ссылку в `nodeId`, идентификатор извлечётся
     автоматически)

2) **Спроектировать структуру блока**
   - Выбрать каталог:
     - `src/components/<blockName>/` — для проектно-специфичных блоков
     - `src/ui/<blockName>/` — для переиспользуемых атомарных UI
   - Создать два файла: `index.tsx` и `com.module.scss`
   - Именование: директория и файлы — `camelCase`, компонент — `PascalCase`
   - Базовый класс блока в SCSS — по БЭМ с "_": `block_name`, элементы —
     `block_name__element`, модификаторы — `block_name__element_is_active`

3) **Верстка компонента**
   - По умолчанию — серверный компонент Next.js App Router (без `use client`)
     Добавлять `use client` только если есть интерактивность
   - Типизировать пропсы через TypeScript `type Props = { ... }` и
     `export function BlockName(props: Props) { ... }`
   - Использовать встроенные компоненты Next.js: `Image`, `Link`, `Script`
   - Для иконок — спрайт `[public/img/sprite.svg](mdc:public/img/sprite.svg)`
     через `<svg><use href="/img/sprite.svg#icon_id" /></svg>`
   - Картинки — только `next/image` с явными `width`/`height`
   - Изображения из Figma необходимо экспортировать и сохранить в `public/img/`
     как отдельные файлы или объединить в `public/img/sprite.svg`. Использование
     внешних URL (Figma/CDN/localhost) запрещено. В коде указывать пути вида
     `src="/img/filename.ext"`
   - Контейнер — глобальный класс `.container`
   - Разметка — согласно desktop-макету, затем адаптив

4) **SCSS-стили**
   - Модульные стили: `com.module.scss`, импорт как `styles`
   - БЭМ с "_", единичный `line-height` (без единиц), не указывать `font-family`
   - Медиа-правила внутри классов:
     - `@media (max-width: 992px) { ... }` — планшет
     - `@media (max-width: 768px) { ... }` — мобильный
   - Сетка/отступы — как в Figma; значения и цвета — из токенов (если доступны)
   - При необходимости — использовать `clsx` для условных классов

5) **Интеграция на страницу**
   - Разместить блок согласно `place`:
     - Для главной: редактировать `[src/app/page.tsx](mdc:src/app/page.tsx)`
     - Для конкретного маршрута: соответствующий `page.tsx` в `src/app/<route>/`
     - Для шапки/подвала: соответствующие компоненты
   - Импортировать компонент и вставить в указанное место

6) **Проверка и полировка**
   - Сверить 3 брейкпоинта с изображениями из Figma (ПК/≤992/≤768)
   - Проверить доступность: `alt`, `aria-*`, фокусируемость интерактивов
   - Линтер/типизация без ошибок

7) **Что вывести пользователю**
   - Список созданных/изменённых файлов и краткое описание
   - Короткий пример импорта/вставки, если блок добавлен на страницу

### Шаблоны

Минимальный каркас компонента:
```tsx
// src/components/blockName/index.tsx
import Image from "next/image"
import Link from "next/link"
import clsx from "clsx"
import styles from "./com.module.scss"

type Props = {
	className?: string
}

export function BlockName({ className }: Props) {
	return (
		<section className={clsx(styles.block_name, className)}>
			<div className="container">
				{/* content */}
			</div>
		</section>
	)
}
```

```scss
/* src/components/blockName/com.module.scss */
.block_name {
	/* desktop base */
	line-height: 1.26;

	@media (max-width: 992px) {
		/* tablet */
	}

	@media (max-width: 768px) {
		/* mobile */
	}
}

.block_name__element {
	@media (max-width: 992px) {}
	@media (max-width: 768px) {}
}
```

Пример подключения на главной:
```tsx
// src/app/page.tsx
import { BlockName } from "@/components/blockName"

export default function NextPage() {
	return (
		<main>
			{/* ... */}
			<BlockName />
			{/* ... */}
		</main>
	)
}
```

### Технические нормы проекта (важно)
- **Специфика Figma-верстки**:
  - Изображения из Figma экспортировать в `public/img/` (внешние URL запрещены)
  - Использовать пути вида `src="/img/filename.ext"`
  
- **Остальные правила**: см. typescript-react.mdc и nextjs-structure.mdc

### Полезные ссылки на файлы проекта
- Главная страница: `[src/app/page.tsx](mdc:src/app/page.tsx)`
- Макеты шрифтов/глобальные стили: `[src/styles/globals.scss](mdc:src/styles/globals.scss)`
- Спрайт и логотипы: `[public/img/](mdc:public/img/)`

