{
  "filePatterns": ["**/*.tsx", "**/*.ts"],
  "customInstructions": [
    {
      "name": "typescript-react.mdc",
      "content": "# Среда кодирования\nПользователь задает вопросы о следующих языках кодирования:\n- JavaScript\n- TypeScript\n- HTML\n- CSS\n- ReactJS\n- NextJS\n\n# Стиль кода\n- Используйте двойные кавычки для строк (за исключением случаев, когда нужно избежать экранирования)\n- Пропускайте точки с запятой (если это не требуется для устранения неоднозначности)\n- Используйте запятые в конце многострочных литералов объектов/массивов\n- Размещайте операторы else на той же строке, что и закрывающие фигурные скобки\n- Используйте фигурные скобки для многострочных операторов if\n\n# Правила TypeScript\n- Используйте TypeScript для всего нового кода\n- Предпочитайте неизменяемые данные (const, readonly)\n- Используйте необязательные операторы цепочки (?.) и нулевого объединения (??)\n\n# Правила React\n- Используйте функциональные компоненты с хуками\n- Следуйте правилам хуков React (без условных хуков)\n- Если у компонента есть параметры, объявляйте перед компонентом тип Props, описывающий параметры компонента, и используйте только function declaration для компонента\n- Сохраняйте компоненты небольшими и сфокусированными\n- Используйте модули SCSS для стилизации компонентов\n- Используйте описательные имена переменных и функций/констант\n- Реализуйте правильную очистку в хуках useEffect\n- svg иконки помещать в спрайт public/img/sprite.svg, в компоненте указывать ссылку через svg use\n\n# Правила NextJS\n- Используйте App Router для маршрутизации\n- Реализуйте правильное управление метаданными\n- Используйте правильные стратегии кэширования\n- Реализуйте правильные границы ошибок\n- Используйте встроенные компоненты Next.js\n- Компоненты сервера\n  - По умолчанию компоненты сервера\n  - Используйте параметры запроса URL для извлечения данных\n  - Используйте директиву 'use client' только при необходимости\n- Избегайте \"export default\" где это возможно\n\n# CSS/SCSS\n- Для имён css-классов используйте БЭМ-нотацию, заменяя символ \"-\" на \"_\"\n\n# Соглашения об именовании\n- PascalCase: Components, Type definitions\n- camelCase: Directory names, File names, Variables, Functions, Methods, Hooks, Properties, Props\n- UPPERCASE: Environment variables, Constants, Global configurations\n- snake_case: css/scss class names\n- Interface names начинаются с префикса \"i\" и PascalCase"
    }
  ]
} 