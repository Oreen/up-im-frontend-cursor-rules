---
description: 
globs: 
alwaysApply: true
---
# Среда кодирования
Пользователь задает вопросы о следующих языках кодирования:
- JavaScript
- TypeScript
- HTML
- CSS
- ReactJS
- NextJS

# Стиль кода
- Используйте двойные кавычки для строк (за исключением случаев, когда нужно избежать экранирования)
- Пропускайте точки с запятой (если это не требуется для устранения неоднозначности)
- Используйте запятые в конце многострочных литералов объектов/массивов
- Размещайте операторы else на той же строке, что и закрывающие фигурные скобки
- Используйте фигурные скобки для многострочных операторов if

# Правила TypeScript
- Используйте TypeScript для всего нового кода
- Предпочитайте избегать приведения типа к "any"
- Предпочитайте неизменяемые данные (const, readonly)
- Используйте необязательные операторы цепочки (?.) и нулевого объединения (??)

# Правила React
- Используйте функциональные компоненты с хуками
- Следуйте правилам хуков React (без условных хуков)
- Если у компонента есть параметры, объявляйте перед компонентом тип Props, описывающий параметры компонента, и используйте только function declaration для компонента, например: "type Props = {
  	open: boolean
  	setOpen: (open: boolean) => void
  }

  export function HeaderActions({ open, setOpen }: Props) { ... }"
- Сохраняйте компоненты небольшими и сфокусированными
- Используйте модули SCSS для стилизации компонентов
- Используйте описательные имена переменных и функций/констант. Кроме того, функции событий должны быть названы с префиксом «handle», например «handleClick» для onClick и «handleKeyDown» для onKeyDown
- Реализуйте правильную очистку в хуках useEffect
- svg иконки помещать в спрайт public/img/sprite.svg, в компоненте указывать ссылку через svg use

# Правила NextJS
- Используйте App Router для маршрутизации
- Реализуйте правильное управление метаданными
- Используйте правильные стратегии кэширования
- Реализуйте правильные границы ошибок
- Используйте встроенные компоненты Next.js:
    - Компонент изображения для оптимизированных изображений
    - Компонент ссылки для навигации на стороне клиента
    - Компонент скрипта для внешних скриптов
- Компоненты сервера
    - По умолчанию компоненты сервера
    - Используйте параметры запроса URL для извлечения данных и управления состоянием сервера
    - Используйте директиву 'use client' только при необходимости:
        - Прослушиватели событий
        - API браузера
        - Управление состоянием
        - Библиотеки только на стороне клиента
- Избегайте "export default" где это возможно. Исключение — директория src/app (NextJS маршрутизация), где файл страницы page.tsx всегда имеет "export default function NextPage"

# CSS/SCSS
- Для имён css-классов используйте БЭМ-нотацию (Блок, Элемент, Модификатор). Вместо символа "-" в названии css класса используй "_"
- В проекте включен линтер для SCSS модулей. Если в .tsx файле возникает TypeScript ошибка о том, что CSS класс не существует в объекте styles (например, "Property 'myClass' does not exist on type..."), то для устранения ошибки необходимо добавить отсутствующий CSS класс в файл "com.module.scss"

# Использование библиотек
- По возможности избегай необходимости установки новых библиотек в проект
- Используйте функцию fetcher импортированную из "@up-im/frontend/http/fetcher" для отправки запросов на сервер.
- В клиентских компонентах Next.js, если компонент содержит поиск или фильтрацию, загружай и обновляй данные с сервера с помощью библиотеки useSWR
- Если компоненту нужно динамически применять несколько классов или указать более одного класса, используйте библиотеку clsx. Она упрощает управление условными классами и делает код более читаемым (например, clsx("class1", styles.class2, {[styles.class3]: condition})).
- Для слайдеров используй библиотеку swiper
- Для форм используй библиотеку react-hook-form

# Структура компонентов
- В директориях src/components и src/ui всегда должна быть папка с двумя файлами: “index.tsx” и “com.module.scss”
- Если компоненты относятся к одной функциональности, используйте вложенность папок (например, src/components/catalog/product/index.tsx)

# Соглашения об именовании
- Use PascalCase for:
    - Components
    - Type definitions
- Use camelCase for:
    - Directory names (e.g., components/authWizard)
    - File names (e.g., userProfile.tsx)
    - Variables
    - Functions
    - Methods
    - Hooks
    - Properties
    - Props
- Use UPPERCASE for:
    - Environment variables
    - Constants
    - Global configurations
- Use snake_case for:
    - css\scss class name
- Interface names (not "Type" names) must begin with the prefix "i" followed by the name in PascalCase (e.g. iUser, iProduct). This helps to easily distinguish interfaces from other data types.
